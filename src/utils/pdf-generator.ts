/**
 * PDF generation utility for Theatre Shifts
 * Uses basic text formatting to create downloadable reports
 */

import { getPool } from "../models/db.ts";
import { formatDateTime } from "./timezone.ts";

export interface ShiftData {
  show_name: string;
  role: string;
  date: string;
  time: string;
}

export interface VolunteerData {
  name: string;
  email: string | null;
}

interface VolunteerRecord {
  id: string; // UUID
  name: string;
  email?: string;
  phone?: string;
  approved: boolean;
}

interface ShiftRow {
  id: number;
  show_id: number;
  show_name: string;
  show_date_id: number;
  role: string;
  arrive_time: string;
  depart_time: string;
  show_date: string;
  start_time: string;
  end_time: string;
}

export interface PDFData {
  volunteer: VolunteerRecord;
  assignedShifts: ShiftRow[];
  availableShifts: ShiftRow[];
  generatedAt: string;
}

export function generateShiftRemovalPDF(volunteer: VolunteerData, shifts: ShiftData[]): Uint8Array {
  const content = generatePDFContent(volunteer, shifts);

  // For a simple implementation, we'll return a plain text file
  // In production, you might want to use a library like jsPDF or puppeteer
  return new TextEncoder().encode(content);
}

function generatePDFContent(volunteer: VolunteerData, shifts: ShiftData[]): string {
  const currentDate = new Date().toLocaleDateString('en-AU', {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });

  const currentTime = new Date().toLocaleTimeString('en-AU', {
    hour: '2-digit',
    minute: '2-digit'
  });

  return `THEATRE SHIFTS - VOLUNTEER REMOVAL REPORT
==========================================

Generated: ${currentDate} at ${currentTime}
Administrator: System Automated Process

VOLUNTEER INFORMATION
====================
Name: ${volunteer.name}
Email: ${volunteer.email || 'Not provided'}
Status: Login access disabled

REMOVED SHIFTS
==============
${shifts.length === 0 ? 'No future shifts were assigned to this volunteer.' :
      shifts.map((shift, index) => `
${index + 1}. SHOW: ${shift.show_name}
   ROLE: ${shift.role}
   DATE: ${shift.date}
   TIME: ${shift.time}
   STATUS: Removed from assignment
`).join('')}

SUMMARY
=======
Total shifts removed: ${shifts.length}
Action taken: Volunteer login disabled, all shift assignments removed
Reason: Administrative action - login access revoked

IMPACT
======
${shifts.length > 0 ?
      `The following ${shifts.length} shift${shifts.length > 1 ? 's' : ''} ${shifts.length > 1 ? 'are' : 'is'} now available for reassignment:
${shifts.map(shift => `- ${shift.show_name} (${shift.role}) on ${shift.date}`).join('\n')}

Please ensure these shifts are reassigned to other volunteers before the performance dates.` :
      'No shifts were affected by this action.'}

NEXT ACTIONS
============
1. Review the list of removed shifts above
2. Reassign shifts to other volunteers as needed
3. Update any related documentation or schedules
4. Notify relevant team members if required

This report was automatically generated by the Theatre Shifts Management System.
For questions about this action, please contact the system administrator.

Theatre Shifts Management System
Report Generated: ${new Date().toISOString()}
`;
}

export function getMimeType(): string {
  return "text/plain";
}

export function getFileExtension(): string {
  return "txt";
}

/**
 * Generates a running sheet report for a show performance
 */
export function generateRunSheetPDF(data: {
  showName: string;
  date: string;
  performanceTime: string;
  participants: Array<{
    name: string;
    arriveTime: string;
    departTime: string;
    role: string;
  }>;
  unfilledShifts: Array<{
    role: string;
    arriveTime: string;
    departTime: string;
  }>;
}): Uint8Array {
  const currentDate = new Date().toLocaleDateString('en-AU', {
    weekday: 'long', year: 'numeric', month: 'long', day: 'numeric'
  });
  const currentTime = new Date().toLocaleTimeString('en-AU', {
    hour: '2-digit', minute: '2-digit'
  });

  let content = `THEATRE SHIFTS - PERFORMANCE RUNNING SHEET\n==========================================\n\nGenerated: ${currentDate} at ${currentTime}\n\nSHOW INFORMATION\n================\nShow: ${data.showName}\nDate: ${data.date}\nPerformance Time: ${data.performanceTime}\n\nVOLUNTEERS\n==========\n`;

  if (data.participants.length === 0) {
    content += 'No volunteers assigned for this performance.\n';
  } else {
    data.participants.forEach((p, idx) => {
      content += `${idx + 1}. Name: ${p.name}\n   Role: ${p.role}\n   Arrive: ${p.arriveTime}\n   Depart: ${p.departTime}\n`;
    });
  }

  content += `\nUNFILLED SHIFTS\n===============\n`;
  if (data.unfilledShifts.length === 0) {
    content += 'All shifts are filled.\n';
  } else {
    data.unfilledShifts.forEach((s, idx) => {
      content += `${idx + 1}. Role: ${s.role}\n   Arrive: ${s.arriveTime}\n   Depart: ${s.departTime}\n   Date: ${s.date}\n`;
    });
  }

  content += `\nNote: No participant contact details are included in this report.\n\nTheatre Shifts Management System\nReport Generated: ${new Date().toISOString()}\n`;

  return new TextEncoder().encode(content);
}

// In a production environment, you might want to use a proper PDF library
// such as jsPDF for client-side generation or Puppeteer for server-side generation
// For now, this provides a readable text-based report that can be easily downloaded

/**
 * Generates PDF data for a volunteer by participant ID
 */
export async function generateVolunteerPDFData(volunteerId: string): Promise<PDFData> {
  const pool = getPool();
  const client = await pool.connect();

  try {
    // Get volunteer details
    const volunteerRes = await client.queryObject<VolunteerRecord>(
      "SELECT * FROM participants WHERE id=$1", [volunteerId]
    );

    if (volunteerRes.rows.length === 0) {
      throw new Error("Volunteer not found");
    }

    // Get assigned shifts - retrieve timestamps in Adelaide timezone
    const assignedShiftsRes = await client.queryObject<ShiftRow>(
      `SELECT s.id, s.role, s.arrive_time AT TIME ZONE 'Australia/Adelaide' as arrive_time, 
              s.depart_time AT TIME ZONE 'Australia/Adelaide' as depart_time, s.show_date_id,
              sh.name as show_name, sh.id as show_id, 
              TO_CHAR(sd.start_time AT TIME ZONE 'Australia/Adelaide', 'YYYY-MM-DD') as show_date, 
              sd.start_time AT TIME ZONE 'Australia/Adelaide' as start_time, 
              sd.end_time AT TIME ZONE 'Australia/Adelaide' as end_time
       FROM shifts s
       JOIN show_dates sd ON sd.id = s.show_date_id
       JOIN shows sh ON sh.id = sd.show_id
       JOIN participant_shifts vs ON vs.shift_id = s.id
       WHERE vs.participant_id = $1
       ORDER BY sh.name, sd.start_time AT TIME ZONE 'Australia/Adelaide', s.arrive_time AT TIME ZONE 'Australia/Adelaide'`,
      [volunteerId]
    );

    // Get available shifts (not assigned to this volunteer) - retrieve timestamps in Adelaide timezone
    const shiftsRes = await client.queryObject<ShiftRow>(
      `SELECT s.id, s.role, s.arrive_time AT TIME ZONE 'Australia/Adelaide' as arrive_time, 
              s.depart_time AT TIME ZONE 'Australia/Adelaide' as depart_time, s.show_date_id,
              sh.name as show_name, sh.id as show_id, 
              TO_CHAR(sd.start_time AT TIME ZONE 'Australia/Adelaide', 'YYYY-MM-DD') as show_date, 
              sd.start_time AT TIME ZONE 'Australia/Adelaide' as start_time, 
              sd.end_time AT TIME ZONE 'Australia/Adelaide' as end_time
       FROM shifts s
       JOIN show_dates sd ON sd.id = s.show_date_id
       JOIN shows sh ON sh.id = sd.show_id
       LEFT JOIN participant_shifts vs ON vs.shift_id = s.id AND vs.participant_id = $1
       WHERE vs.participant_id IS NULL
       ORDER BY sh.name, sd.start_time AT TIME ZONE 'Australia/Adelaide', s.arrive_time AT TIME ZONE 'Australia/Adelaide'`,
      [volunteerId]
    );

    // Ensure show_date is always a string in YYYY-MM-DD format
    const normalizeDate = (d: unknown) => {
      if (!d) return '';
      if (typeof d === 'string') return d.length > 10 ? d.split('T')[0] : d;
      if (d instanceof Date) return d.toISOString().split('T')[0];
      return String(d);
    };

    const assignedShifts = assignedShiftsRes.rows.map(shift => ({
      ...shift,
      show_date: normalizeDate(shift.show_date)
    }));
    const availableShifts = shiftsRes.rows.map(shift => ({
      ...shift,
      show_date: normalizeDate(shift.show_date)
    }));

    return {
      volunteer: volunteerRes.rows[0],
      assignedShifts,
      availableShifts,
      generatedAt: formatDateTime(new Date())
    };
  } finally {
    client.release();
  }
}

/**
 * Generates a comprehensive volunteer schedule PDF as HTML for browser rendering
 */
export function generateVolunteerSchedulePDF(data: PDFData): Uint8Array {
  const content = generateVolunteerScheduleHTMLContent(data);
  return new TextEncoder().encode(content);
}

function generateVolunteerScheduleHTMLContent(data: PDFData): string {
  const { volunteer, assignedShifts, generatedAt } = data;

  // Filter to current month and future shifts only
  const currentAndFutureShifts = filterCurrentAndFutureShifts(assignedShifts);

  return `<!DOCTYPE html>
<html>
<head>
Shift Times: 14:45 - 16:15 +1 day (+1d) | FOH Manager
  <meta charset="UTF-8">
  <title>Theatre Shifts Schedule - ${volunteer.name}</title>
  <style>
    body { 
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif; 
      margin: 40px; 
      line-height: 1.6; 
      color: #333;
    }
    .header { 
      text-align: center; 
      border-bottom: 3px solid #007bff; 
      padding-bottom: 20px; 
      margin-bottom: 30px; 
    }
    .header h1 { 
      color: #007bff; 
      margin: 0; 
      font-size: 28px; 
    }
    .header h2 { 
      color: #666; 
      margin: 5px 0; 
      font-size: 18px; 
      font-weight: normal; 
    }
    .volunteer-info { 
      background: #f8f9fa; 
      padding: 20px; 
      border-radius: 8px; 
      margin-bottom: 30px; 
    }
    .volunteer-info h3 { 
      margin: 0 0 15px 0; 
      color: #333; 
    }
    .volunteer-info p { 
      margin: 5px 0; 
    }
    .shifts-section h3 { 
      color: #333; 
      border-bottom: 2px solid #007bff; 
      padding-bottom: 10px; 
    }
    .shift { 
      background: #fff; 
      border: 1px solid #ddd; 
      border-radius: 6px; 
      padding: 15px; 
      margin-bottom: 15px; 
      break-inside: avoid;
    }
    .shift-header { 
      font-weight: bold; 
      color: #007bff; 
      font-size: 16px; 
      margin-bottom: 8px; 
    }
    .shift-details { 
      color: #555; 
    }
    .shift-details div { 
      margin: 3px 0; 
    }
    .no-shifts { 
      background: #fff3cd; 
      border: 1px solid #ffc107; 
      border-radius: 6px; 
      padding: 20px; 
      text-align: center; 
      color: #856404; 
    }
    .footer { 
      margin-top: 40px; 
      padding-top: 20px; 
      border-top: 2px solid #eee; 
      font-size: 12px; 
      color: #666; 
    }
    .important { 
      background: #e3f2fd; 
      border: 1px solid #2196f3; 
      border-radius: 6px; 
      padding: 15px; 
      margin-top: 30px; 
    }
    .important h4 { 
      margin: 0 0 10px 0; 
      color: #1976d2; 
    }
    .important ul { 
      margin: 10px 0; 
      padding-left: 20px; 
    }
    @media print {
      body { margin: 20px; }
      .header { page-break-after: avoid; }
      .shift { page-break-inside: avoid; }
    }
  </style>
</head>
<body>
  <div class="header">
    <h1>🎭 Theatre Shifts</h1>
    <h2>Volunteer Schedule</h2>
  </div>
    
  <div class="volunteer-info">
    <h3>Volunteer Information</h3>
    <p><strong>Name:</strong> ${volunteer.name}</p>
    ${volunteer.email ? `<p><strong>Email:</strong> ${volunteer.email}</p>` : ''}
    ${volunteer.phone ? `<p><strong>Phone:</strong> ${volunteer.phone}</p>` : ''}
    <p><strong>Generated:</strong> ${generatedAt}</p>
    <p><strong>For updates visit:</strong> ${Deno.env.get('BASE_URL')}/volunteer/signup/${volunteer.id} || 'https://theatre-shifts.com/volunteer/signup/${volunteer.id}'</p>
  </div>

  <div class="shifts-section">
    <h3>Assigned Shifts (${currentAndFutureShifts.length} total)</h3>
    ${currentAndFutureShifts.length > 0 ?
    currentAndFutureShifts.map((shift, index) => {
    // Use arrive_time for date and time, depart_time for end time
    const date = formatDateForDisplay(shift.arrive_time);
    const arriveTime = formatTimeForDisplay(shift.arrive_time);
    const departTime = formatTimeForDisplay(shift.depart_time);

    return `
    <div class="shift">
      <div class="shift-header">${index + 1}. ${shift.show_name}</div>
      <div class="shift-details">
        <div><strong>Date:</strong> ${date}</div>
        <div><strong>Call Time:</strong> ${arriveTime}</div>
        <div><strong>End Time:</strong> ${departTime}</div>
        <div><strong>Role:</strong> ${shift.role}</div>
      </div>
    </div>`;
    }).join('') :
    `
    <div class="no-shifts">
      <p><strong>No shifts assigned</strong></p>
      <p>You don't have any shifts assigned for the current month and future dates.<br>
      Please visit the online schedule to sign up for available shifts.</p>
    </div>`
  }
  </div>
    
  <div class="important">
    <h4>Important Information</h4>
    <ul>
      <li>Please arrive 15 minutes before your call time</li>
      <li>Contact the theatre if you cannot make your shift</li>
      <li>Check the online schedule regularly for updates</li>
      <li>All times are in Adelaide, Australia timezone</li>
    </ul>
  </div>
    
  <div class="footer">
    <p>For questions or changes, visit the online schedule or contact theatre administration.</p>
    <p>This document was generated on ${generatedAt} from Theatre Shifts volunteer management system.</p>
  </div>
</body>
</html>`;
}

/**
 * Formats volunteer shift data for display in emails (date and time first)
 */
// Updated: formatting now handled inline in admin controller for email preview (see admin.ts)
export function formatShiftForDisplay(shift: ShiftRow): string {
  const date = formatDateForDisplay(shift.show_date);
  const arriveTime = formatTimeForDisplay(shift.arrive_time);
  return `${date} ${arriveTime} - ${shift.show_name} (${shift.role})`;
}

/**
 * Gets current and future shifts only, ordered by date (next shift first)
 */
export function filterCurrentAndFutureShifts(shifts: ShiftRow[]): ShiftRow[] {
  // Get current date in Adelaide timezone for comparison
  // Use a more reliable method to get Adelaide's current date
  const now = new Date();
  const adelaide = new Intl.DateTimeFormat('en-CA', {
    timeZone: 'Australia/Adelaide',
    year: 'numeric',
    month: '2-digit',
    day: '2-digit'
  }).format(now); // Returns YYYY-MM-DD format
  
  const [todayYear, todayMonth, todayDay] = adelaide.split('-').map(Number);
  const today = new Date(todayYear, todayMonth - 1, todayDay);

  return shifts
    .filter(shift => {
      if (shift && shift.show_date) {
        // Parse the show_date as a local date (since it's already in Adelaide timezone from the DB)
        const [year, month, day] = shift.show_date.split('-').map(Number);
        const shiftDate = new Date(year, month - 1, day);
        
        return shiftDate >= today;
      }
      return false;
    })
    .sort((a, b) => {
      // Parse dates correctly for sorting
      const [yearA, monthA, dayA] = a.show_date.split('-').map(Number);
      const [yearB, monthB, dayB] = b.show_date.split('-').map(Number);
      const dateA = new Date(yearA, monthA - 1, dayA);
      const dateB = new Date(yearB, monthB - 1, dayB);
      
      return dateA.getTime() - dateB.getTime();
    });
}

function formatDateForDisplay(dateString: string): string {
  // The database returns timestamps already in Adelaide timezone
  // We need to parse them as local time without timezone conversion
  
  if (dateString.includes('T')) {
    // Format: 2025-07-15T18:00:00 (already in Adelaide time)
    const datePart = dateString.split('T')[0];
    const [year, month, day] = datePart.split('-').map(Number);
    
    // Create a date object directly from the components to avoid timezone issues
    const date = new Date(year, month - 1, day, 12, 0, 0); // Use noon to avoid DST edge cases
    
    return date.toLocaleDateString('en-AU', {
      weekday: 'short',
      day: '2-digit',
      month: 'short',
      year: 'numeric'
    });
  } else {
    // Format: 2025-07-15 (date only)
    const [year, month, day] = dateString.split('-').map(Number);
    const date = new Date(year, month - 1, day, 12, 0, 0); // Use noon to avoid DST edge cases
    
    return date.toLocaleDateString('en-AU', {
      weekday: 'short',
      day: '2-digit',
      month: 'short',
      year: 'numeric'
    });
  }
}

function formatTimeForDisplay(timeString: string): string {
  // The database returns timestamps already in Adelaide timezone
  // We need to parse them as local time without timezone conversion
  
  if (timeString.includes('T')) {
    // Format: 2025-07-15T18:00:00 (already in Adelaide time)
    const timePart = timeString.split('T')[1];
    const [hours, minutes] = timePart.split(':').map(Number);
    
    // Create a date object using a fixed date but with the specific time
    // This avoids timezone conversion issues
    const time = new Date(2025, 0, 1, hours, minutes); // Use a fixed date to avoid DST issues
    
    return time.toLocaleTimeString('en-AU', {
      hour: '2-digit',
      minute: '2-digit',
      hour12: true
    });
  } else {
    // Fallback: assume it's already a time string
    return timeString;
  }
}

export function getVolunteerScheduleMimeType(): string {
  return "text/html";
}

export function getVolunteerScheduleFileExtension(): string {
  return "html";
}
