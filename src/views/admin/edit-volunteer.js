// Get volunteer ID from the script tag
const volunteerId = document.currentScript.getAttribute('data-volunteer-id');

// Load email history when page loads
document.addEventListener('DOMContentLoaded', function() {
  // Ensure modal is hidden on page load
  const modal = document.getElementById('emailContentModal');
  if (modal) {
    modal.style.display = 'none';
  }
  
  loadEmailHistory();
  setupEventListeners();
});

function setupEventListeners() {
  // Handle form submission for volunteer update
  const form = document.getElementById('volunteerForm');
  if (form) {
    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const formData = new FormData(this);
      const data = {
        name: formData.get('name'),
        email: formData.get('email') || null,
        phone: formData.get('phone') || null
      };
      
      try {
        const response = await fetch(`/admin/api/volunteers/${volunteerId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data),
          credentials: 'include'
        });
        
        if (response.ok) {
          globalThis.location.href = '/admin/volunteers';
        } else {
          if (typeof Modal !== 'undefined') {
            Modal.error('Error', 'Failed to update volunteer');
          } else {
            alert('Failed to update volunteer');
          }
        }
      } catch (error) {
        console.error('Update error:', error);
        if (typeof Modal !== 'undefined') {
          Modal.error('Error', 'Error updating volunteer');
        } else {
          alert('Error updating volunteer');
        }
      }
    });
  }
}

async function loadEmailHistory() {
  const loadingEl = document.getElementById('emailHistoryLoading');
  const contentEl = document.getElementById('emailHistoryContent');
  const errorEl = document.getElementById('emailHistoryError');
  
  try {
    // Show loading state
    if (loadingEl) loadingEl.style.display = 'flex';
    if (contentEl) contentEl.style.display = 'none';
    if (errorEl) errorEl.style.display = 'none';
    
    const response = await fetch(`/admin/api/volunteers/${volunteerId}/emails`);
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: Failed to load email history`);
    }
    
    const data = await response.json();
    
    // Hide loading state
    if (loadingEl) loadingEl.style.display = 'none';
    
    if (data.emails && data.emails.length > 0) {
      if (contentEl) {
        contentEl.innerHTML = renderEmailHistory(data.emails);
        contentEl.style.display = 'block';
      }
    } else {
      if (errorEl) {
        errorEl.textContent = 'No emails have been sent to this volunteer yet.';
        errorEl.style.display = 'block';
      }
    }
  } catch (error) {
    console.error('Error loading email history:', error);
    if (loadingEl) loadingEl.style.display = 'none';
    if (errorEl) {
      errorEl.textContent = 'Failed to load email history. Please try refreshing the page.';
      errorEl.className = 'alert alert-danger';
      errorEl.style.display = 'block';
    }
  }
}

function renderEmailHistory(emails) {
  return emails.map(email => {
    const sentDate = new Date(email.sent_at).toLocaleString();
    
    return `
      <div class="email-item">
        <div class="email-header">
          <h4 class="email-subject">${escapeHtml(email.subject)}</h4>
          <span class="email-date">${sentDate}</span>
        </div>
        <div class="email-actions">
          <button type="button" class="btn btn-sm btn-primary" 
                  onclick="viewEmailContent(${email.id}, '${escapeHtml(email.subject)}')">
            View Details
          </button>
        </div>
      </div>
    `;
  }).join('');
}

function escapeHtml(text) {
  const map = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#039;'
  };
  return String(text).replace(/[&<>"']/g, m => map[m]);
}

// Used in onclick handlers generated by renderEmailHistory
// deno-lint-ignore no-unused-vars
async function viewEmailContent(emailId, _subject) {
  const modal = document.getElementById('emailContentModal');
  const title = document.getElementById('emailContentTitle');
  const body = document.getElementById('emailContentBody');
  
  if (!modal || !title || !body) {
    console.error('Modal elements not found');
    return;
  }
  
  // Set title and show loading state
  title.textContent = 'Email Details';
  body.innerHTML = '<div class="loading-spinner"><div class="spinner"></div><span>Loading email details...</span></div>';
  
  // Show modal with animation
  modal.style.display = 'block';
  
  try {
    const response = await fetch(`/admin/api/emails/${emailId}/content`);
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: Failed to load email content`);
    }
    
    const email = await response.json();
    
    if (!email) {
      throw new Error('No email data received');
    }
    
    // Create status badge HTML with proper status handling
    let statusBadge = '';
    const status = email.delivery_status || 'unknown';
    switch (status) {
      case 'sent':
        statusBadge = '<span class="status-success">âœ“ Sent</span>';
        break;
      case 'delivered':
        statusBadge = '<span class="status-success">âœ“ Delivered</span>';
        break;
      case 'failed':
        statusBadge = '<span class="status-danger">âœ— Failed</span>';
        break;
      case 'simulated':
        statusBadge = '<span class="status-info">âš  Simulated</span>';
        break;
      default:
        statusBadge = `<span class="status-secondary">${escapeHtml(status)}</span>`;
    }
    
    // Build attachments section
    let attachmentsSection = '';
    if (email.attachments && email.attachments.length > 0) {
      attachmentsSection = `
        <div class="attachments-section">
          <span class="attachments-label">ðŸ“Ž Attachments:</span>
          <div class="attachments-list">
            ${email.attachments.map(att => `
              <a href="/admin/api/email-attachment/${att.id}" 
                 target="_blank"
                 class="attachment-link" 
                 title="Open ${escapeHtml(att.filename)}">
                <span class="attachment-icon">ðŸ“Ž</span>
                ${escapeHtml(att.filename)}
              </a>
            `).join('')}
          </div>
        </div>
      `;
    }
    
    // Build the modal content with proper formatting
    const modalContent = `
        <div class="email-details-grid">
          <span class="email-details-label">From:</span>
          <span class="email-details-value">${escapeHtml(email.sender_name || 'Unknown')} &lt;${escapeHtml(email.sender_email || '')}&gt;</span>
          
          <span class="email-details-label">To:</span>
          <span class="email-details-value">${escapeHtml(email.recipient_name || 'Unknown')} &lt;${escapeHtml(email.recipient_email || '')}&gt;</span>
          
          <span class="email-details-label">Subject:</span>
          <span class="email-details-value">${escapeHtml(email.subject || 'No subject')}</span>
          
          <span class="email-details-label">Sent:</span>
          <span class="email-details-value">${new Date(email.sent_at).toLocaleString()}</span>
          
          <span class="email-details-label">Type:</span>
          <span class="email-details-value">${escapeHtml(email.email_type || 'unknown').replace('_', ' ')}</span>
          
          <span class="email-details-label">Status:</span>
          <span class="email-details-value">${statusBadge}</span>
        </div>
        
        ${attachmentsSection}
        
        <div class="email-content-section">
          <span class="email-content-label">Content:</span>
          <div class="email-content-body">
            ${email.html_content ? 
              `<iframe srcdoc="${escapeHtml(email.html_content)}"></iframe>` :
              escapeHtml(email.content || 'No content available')
            }
          </div>
        </div>
    `;
    
    // Clear loading and add content
    body.innerHTML = modalContent;
    
  } catch (error) {
    console.error('Error loading email content:', error);
    body.innerHTML = `
      <div class="alert alert-danger">
        <strong>Failed to load email content</strong><br>
        ${error.message || 'An unexpected error occurred'}
      </div>
    `;
  }
}

function closeEmailModal() {
  const modal = document.getElementById('emailContentModal');
  if (modal) {
    modal.style.display = 'none';
    // Clear the modal content to prevent it from showing stale data
    const body = document.getElementById('emailContentBody');
    if (body) {
      body.innerHTML = '';
    }
  }
}

// Close modal when clicking outside of it
globalThis.onclick = function(event) {
  const modal = document.getElementById('emailContentModal');
  if (event.target === modal) {
    closeEmailModal();
  }
}

// Handle escape key to close modal
document.addEventListener('keydown', function(event) {
  if (event.key === 'Escape') {
    const modal = document.getElementById('emailContentModal');
    if (modal && modal.style.display === 'block') {
      closeEmailModal();
    }
  }
});
